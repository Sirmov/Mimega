rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /memes/{itemId}{
      allow read: if true

      allow create: if
      isLoggedIn() &&
      isValidMeme(incomingData()) &&
      checkKeys(incomingData(), ['createdAt','imageUrl','ownerId','title','updatedAt', 'author', 'likes', 'whoLiked'], ['likeId', 'operation']);

      allow update: if 
      isLoggedIn() &&
      (
      // There are three scenarios

      // The requeset is from the owner of the meme
      (
      isOwner(existingData().ownerId) && isOwner(incomingData().ownerId)
      ) ||
      // The request is a like operaion
      (
      incomingData().operation == 'like' &&
      !exists(/databases/$(database)/documents/likes/$(incomingData().likeId)) &&
      existingData().diff(incomingData()).affectedKeys().hasOnly(['likes', 'whoLiked', 'likeId', 'operation'])
      ) ||
      // The request is a unlike operaion
      (
      incomingData().operation == 'unlike' &&
      exists(/databases/$(database)/documents/likes/$(incomingData().likeId)) &&
      existingData().diff(incomingData()).affectedKeys().hasOnly(['likes', 'whoLiked', 'likeId', 'operation'])
      )
      ) &&
      isValidMeme(incomingData()) &&
      checkKeys(incomingData(), ['createdAt','imageUrl','ownerId','title','updatedAt', 'author'], ['likeId', 'operation', 'likes', 'whoLiked']);

      allow delete: if
      isLoggedIn() &&
      isOwner(existingData().ownerId);

      // Validation Functions

      function isValidMeme(meme) {
        return (
        // meme.createdAt
        meme.createdAt is timestamp &&
        meme.createdAt != '' &&
        // meme.imageUrl
        meme.imageUrl is string &&
        meme.imageUrl != '' &&
        // meme.ownerId
        meme.ownerId is string &&
        meme.ownerId != '' &&
        // meme.title
        meme.title is string &&
        meme.title != '' &&
        // meme.updatedAt
        meme.updatedAt is timestamp &&
        meme.updatedAt != '' &&
        // meme.author
        meme.author is string &&
        meme.author != '' &&
        // meme likes
        meme.likes is number &&
        meme.likes != '' &&
        // meme whoLiked
        meme.whoLiked is list &&
        meme.whoLiked != ''
        );
      }
    }

    match /likes/{itemId}{
      allow read: if true

      allow create: if
      isLoggedIn() &&
      isValidLike(incomingData()) &&
      !exists(/databases/$(database)/documents/likes/$(incomingDataId())) &&
      checkKeys(incomingData(), ['createdAt','memeId','ownerId'], []);

      allow delete: if 
      isLoggedIn() &&
      isOwner(existingData().ownerId);

      // Validation Functions

      function isValidLike(like) {
        return (
        // like.createdAt
        like.createdAt is timestamp &&
        like.createdAt != '' &&
        // like.memeId
        like.memeId is string &&
        like.memeId != '' &&
        // like.ownerId
        like.ownerId is string &&
        like.ownerId != '' 
        );
      }
    }

    match /comments/{itemId}{
      allow read: if true

      allow create: if
      isLoggedIn() &&
      isValidComment(incomingData()) &&
      checkKeys(incomingData(), ['comment', 'author', 'createdAt', 'memeId', 'ownerId', 'updatedAt'], []);

      allow update: if false

      allow delete: if
      isLoggedIn() &&
      isOwner(existingData().ownerId);

      // Validation Functions

      function isValidComment(comment) {
        return (
        // comment.comment
        comment.comment is string &&
        comment.comment != '' &&
        // comment.author
        comment.author is string &&
        comment.author != '' &&
        // comment.createdAt
        comment.createdAt is timestamp &&
        comment.createdAt != '' &&
        // comment.memeId
        comment.memeId is string &&
        comment.memeId != '' &&
        // comment.ownerId
        comment.ownerId is string &&
        comment.ownerId != '' &&
        // comment.updatedAt
        comment.updatedAt is timestamp &&
        comment.updatedAt != '' 
        );
      }
    }
  }

  // Common Functions

  function isLoggedIn() {
    return request.auth != null;
  }

  function isOwner(itemOwnerId) {
    return request.auth.uid == itemOwnerId;
  }

  function emailVerified() {
    return request.auth.token.email_verified;
  }

  function getUserData() {
    return get(/databases/$(database)/documents/users/$(request.auth.uid));
  }

  function existingData() {
    return resource.data;
  }

  function incomingData() {
    return request.resource.data;
  }

  function incomingDataId() {
    return request.resource.id;
  }

  function checkKeys(item, requiredFields, optionalFields) {
    let allFields = requiredFields.concat(optionalFields);
    return item.keys().hasAll(requiredFields) &&
    item.keys().hasOnly(allFields)
  }

  function isCalm() {
    return (
    request.time > resource.data.updatedAt +
    duration.value(5, 's')
    ); 
  }
}
